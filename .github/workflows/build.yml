name: CI

on:
  push:
  workflow_dispatch:
    inputs:
      args:
        description: python-semantic-release args
        required: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v7

      - name: Setup Poetry cache
        uses: actions/cache@v1
        id: poetry
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs

      - name: Install dependencies
        run: poetry install

      - name: Lint
        run: ./ci/lint.sh

      - name: Test
        run: ./ci/test.sh

  release:
    runs-on: ubuntu-latest
    needs: Build

    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && !contains(github.event.head_commit.message, 'chore(release)')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.ACCESS_TOKEN }}

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v7

      - name: Setup Poetry cache
        uses: actions/cache@v1
        id: poetry
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs
          poetry env use python

      - name: Install dependencies
        run: pip install python-semantic-release

      - name: Release
        env:
          GH_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          REPOSITORY_USERNAME: __token__
          REPOSITORY_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"
          ./ci/release.sh ${{ inputs.args }}
